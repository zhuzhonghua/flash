# make configuration for the tu-testbed engine library


# If you haven't set TU_TESTBED_COMPILER, then take a guess at its value
# based on the OSTYPE env variable.
#
# If you want to use a particular compiler; for example gcc-3.0, then
# set the environment variable TU_TESTBED_COMPILER to the compiler
# name.
DEBUG=1
CFLAGS := $(CFLAGS) -D TU_CONFIG_LINK_TO_THREAD=2 -D TU_CONFIG_LINK_TO_FREETYPE=1 -D TU_CONFIG_LINK_TO_FFMPEG=0 -D TU_USE_SDL
CFLAGS := $(CFLAGS) $(shell freetype-config --cflags)

ifndef TU_TESTBED_COMPILER
	ifndef $(OSTYPE)
		OSTYPE = $(shell uname)
	endif
	OSTYPE := $(patsubst Linux, linux, $(OSTYPE))
	OSTYPE := $(patsubst Darwin, darwin, $(OSTYPE))

# default to msvc
	TU_TESTBED_COMPILER = msvc

	ifneq (,$(findstring linux, $(OSTYPE)))
		HAVE_GCC_3 := 1
#		If Command-Line specified-compiler...
		ifdef $(CC)
			TU_TESTBED_COMPILER = $(CC)
		else
			TU_TESTBED_COMPILER = g++
		endif
	endif

	ifneq (,$(findstring darwin, $(OSTYPE)))
		HAVE_GCC_DARVIN := 1
		TU_TESTBED_COMPILER = g++
	endif
endif


# If you have libmad installed
# (http://www.underbit.com/products/mad/), and you want to compile
# gameswf with mp3 support, uncomment below.  Note that libmad is
# GPL'd, so if you want to distribute binaries based on this, you must
# distribute the associated source under GPL as well.
#GAMESWF_MP3_SUPPORT=-DGAMESWF_MP3_SUPPORT=1
##LIBMAD_LIB=-lmad
#LIBMAD_LIB=../../libmad-0.15.1b/msvc++/Release/libmad.lib
#LIBMAD_INCLUDE=-I../../libmad-0.15.1b

ifeq ($(HAVE_GCC_DARVIN),1)
# make configuration for the tu-testbed engine library
# use this if compiling for linux

CC := $(TU_TESTBED_COMPILER)
AR := ar -r -s
LIB_OUT_FLAG :=
LIB_PRE := lib
LIB_EXT := a
OBJ_EXT := o
EXE_EXT :=
DLL_EXT := so
LIBS := -lm -lstdc++
DLL_LIBS := -ldl
SDL_CFLAGS := $(shell sdl2-config --cflags)
SDL_LDFLAGS := $(shell sdl2-config --libs)
CFLAGS := $(CFLAGS) $(SDL_CFLAGS) -fPIC -Wall $(GAMESWF_MP3_SUPPORT)
LDFLAGS := -lstdc++
MAKE_DLL := gcc3 -shared
FT_LDFLAGS := $(shell freetype-config --libs)
LDFLAGS := $(LDFLAGS) -lm -liconv -lGLEW \
											-Wl,-framework,ForceFeedback \
											-lobjc -Wl,-framework,CoreVideo \
											-Wl,-framework,Cocoa \
											-Wl,-framework,Carbon \
											-Wl,-framework,IOKit \
											-Wl,-framework,CoreAudio \
											-Wl,-framework,AudioToolbox \
											-Wl,-framework,AudioUnit \
											-Wl,-framework,OpenGL

# On Unix-like machines, these libraries are usually installed in
# standard locations.

#LIBPNG_DIR := $(TOP)/../../../libpng
#LIBPNG_INCLUDE := -I$(LIBPNG_DIR)
#LIBPNG := $(LIBPNG_DIR)/libpng.$(LIB_EXT)
LIBPNG := -lpng

#ZLIB_DIR := $(TOP)/../../../zlib
#ZLIB_INCLUDE := -I$(ZLIB_DIR)
#ZLIB := $(ZLIB_DIR)/libz.$(LIB_EXT)
ZLIB := -lz

#JPEGLIB_DIR := $(TOP)/../../../jpeg-6b
#JPEGLIB_INCLUDE := -I$(JPEGLIB_DIR)
#JPEGLIB := $(JPEGLIB_DIR)/libjpeg.$(LIB_EXT)
JPEGLIB := -ljpeg


ifeq ($(DEBUG), 1)
	# gcc debug flags
	CC_DEBUG_FLAGS := -g
	LDFLAGS := $(LDFLAGS) -g
else
	# gcc non-debug flags
	CC_DEBUG_FLAGS := -O2 -DNDEBUG=1 -ffast-math -fexpensive-optimizations -fomit-frame-pointer
endif
endif  # gcc3


ifeq ($(TU_TESTBED_COMPILER), msvc)
%.$(OBJ_EXT): %.cpp
	$(CC) -c $< -Fo$@ $(CFLAGS)

%.$(OBJ_EXT): %.c
	$(CC) -c $< -Fo$@ $(CFLAGS)
else
%.$(OBJ_EXT): %.cpp
	$(CC) -c $< -o $@ $(CFLAGS)

%.$(OBJ_EXT): %.c
	$(CC) -c $< -o $@ $(CFLAGS)
endif

BASE_LIB := $(TOP)/base/$(LIB_PRE)base.$(LIB_EXT)
GEOMETRY_LIB := $(TOP)/geometry/$(LIB_PRE)geometry.$(LIB_EXT)
NET_LIB := $(TOP)/net/$(LIB_PRE)net.$(LIB_EXT)
ENGINE_INCLUDE := -I$(TOP)


all:

base_lib:
	make -C $(TOP)/base
base_clean:
	make -C $(TOP)/base clean

net_lib:
	make -C $(TOP)/net
net_clean:
	make -C $(TOP)/net clean

geometry_lib:
	make -C $(TOP)/geometry
geometry_clean:
	make -C $(TOP)/geometry clean



# Local Variables:
# mode: Makefile
# End:
