/* DO NOT EDIT THIS FILE!  It was generated by utils/apivergen.abc. */

/* This Source Code Form is subject to the terms of the Mozilla Public * License, v. 2.0. If a copy of the MPL was not distributed with this * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
namespace avmplus {

const char* const kApiVersionNames[kApiVersion_count] = {
    "VM_ALLVERSIONS", 
    "AIR_1_0", 
    "FP_10_0", 
    "AIR_1_5", 
    "AIR_1_5_1", 
    "FP_10_0_32", 
    "AIR_1_5_2", 
    "FP_10_1", 
    "AIR_2_0", 
    "AIR_2_5", 
    "FP_10_2", 
    "AIR_2_6", 
    "SWF_12", 
    "AIR_2_7", 
    "SWF_13", 
    "AIR_3_0", 
    "SWF_14", 
    "AIR_3_1", 
    "SWF_15", 
    "AIR_3_2", 
    "SWF_16", 
    "AIR_3_3", 
    "SWF_17", 
    "AIR_3_4", 
    "SWF_18", 
    "AIR_3_5", 
    "SWF_19", 
    "AIR_3_6", 
    "SWF_20", 
    "AIR_3_7", 
    "SWF_21", 
    "AIR_3_8", 
	"SWF_22", 
	"AIR_3_9", 
	"SWF_23", 
	"AIR_4_0", 
	"SWF_24", 
	"AIR_13_0", 
	"SWF_25", 
	"AIR_14_0", 
	"SWF_26", 
	"AIR_15_0", 
	"SWF_27", 
	"AIR_16_0", 
	"SWF_28", 
	"AIR_17_0", 
	"SWF_29", 
	"AIR_18_0", 
	"SWF_30", 
	"AIR_19_0", 
//ADD_PREVIOUS_2_VERSIONED_LINES
    "VM_INTERNAL"
};

uint32_t const kApiVersionSeriesMembership[kApiVersion_count] = {
    (1<<kApiVersionSeries_AIR)|(1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
    (1<<kApiVersionSeries_FP),
    (1<<kApiVersionSeries_AIR),
	(1<<kApiVersionSeries_FP),
	(1<<kApiVersionSeries_AIR),
	(1<<kApiVersionSeries_FP),
	(1<<kApiVersionSeries_AIR),
	(1<<kApiVersionSeries_FP),
	(1<<kApiVersionSeries_AIR),
	(1<<kApiVersionSeries_FP),
	(1<<kApiVersionSeries_AIR),
	(1<<kApiVersionSeries_FP),
	(1<<kApiVersionSeries_AIR),
	(1<<kApiVersionSeries_FP),
	(1<<kApiVersionSeries_AIR),
	(1<<kApiVersionSeries_FP),
	(1<<kApiVersionSeries_AIR),
	(1<<kApiVersionSeries_FP),
	(1<<kApiVersionSeries_AIR),
	(1<<kApiVersionSeries_FP),
	(1<<kApiVersionSeries_AIR),
//ADD_PREVIOUS_2_VERSIONED_LINES
    (1<<kApiVersionSeries_AIR)|(1<<kApiVersionSeries_FP)
};

// If a version is in an inactive series, what is the closest superset in the active series?
ApiVersion const kApiVersionSeriesTransfer[kApiVersion_count][kApiVersionSeries_count] = {
    { kApiVersion_VM_ALLVERSIONS, kApiVersion_VM_ALLVERSIONS }, // VM_ALLVERSIONS
    { kApiVersion_AIR_1_0, kApiVersion_VM_INTERNAL }, // AIR_1_0
    { kApiVersion_AIR_1_5, kApiVersion_FP_10_0 }, // FP_10_0
    { kApiVersion_AIR_1_5, kApiVersion_VM_INTERNAL }, // AIR_1_5
    { kApiVersion_AIR_1_5_1, kApiVersion_VM_INTERNAL }, // AIR_1_5_1
    { kApiVersion_AIR_1_5_2, kApiVersion_FP_10_0_32 }, // FP_10_0_32
    { kApiVersion_AIR_1_5_2, kApiVersion_VM_INTERNAL }, // AIR_1_5_2
    { kApiVersion_AIR_2_0, kApiVersion_FP_10_1 }, // FP_10_1
    { kApiVersion_AIR_2_0, kApiVersion_VM_INTERNAL }, // AIR_2_0
    { kApiVersion_AIR_2_5, kApiVersion_VM_INTERNAL }, // AIR_2_5
    { kApiVersion_AIR_2_6, kApiVersion_FP_10_2 }, // FP_10_2
    { kApiVersion_AIR_2_6, kApiVersion_VM_INTERNAL }, // AIR_2_6
    { kApiVersion_AIR_2_7, kApiVersion_SWF_12 }, // SWF_12
    { kApiVersion_AIR_2_7, kApiVersion_VM_INTERNAL }, // AIR_2_7
    { kApiVersion_AIR_3_0, kApiVersion_SWF_13 }, // SWF_13
    { kApiVersion_AIR_3_0, kApiVersion_VM_INTERNAL }, // AIR_3_0
    { kApiVersion_AIR_3_1, kApiVersion_SWF_14 }, // SWF_14
    { kApiVersion_AIR_3_1, kApiVersion_VM_INTERNAL }, // AIR_3_1
    { kApiVersion_AIR_3_2, kApiVersion_SWF_15 }, // SWF_15
    { kApiVersion_AIR_3_2, kApiVersion_VM_INTERNAL }, // AIR_3_2
    { kApiVersion_AIR_3_3, kApiVersion_SWF_16 }, // SWF_16
    { kApiVersion_AIR_3_3, kApiVersion_VM_INTERNAL }, // AIR_3_3
    { kApiVersion_AIR_3_4, kApiVersion_SWF_17 }, // SWF_17
    { kApiVersion_AIR_3_4, kApiVersion_VM_INTERNAL }, // AIR_3_4
    { kApiVersion_AIR_3_5, kApiVersion_SWF_18 }, // SWF_18
    { kApiVersion_AIR_3_5, kApiVersion_VM_INTERNAL }, // AIR_3_5
    { kApiVersion_AIR_3_6, kApiVersion_SWF_19 }, // SWF_19
    { kApiVersion_AIR_3_6, kApiVersion_VM_INTERNAL }, // AIR_3_6
    { kApiVersion_AIR_3_7, kApiVersion_SWF_20 }, // SWF_20
    { kApiVersion_AIR_3_7, kApiVersion_VM_INTERNAL }, // AIR_3_7
    { kApiVersion_AIR_3_8, kApiVersion_SWF_21 }, // SWF_21
    { kApiVersion_AIR_3_8, kApiVersion_VM_INTERNAL }, // AIR_3_8
	{ kApiVersion_AIR_3_9, kApiVersion_SWF_22 }, // SWF_22
	{ kApiVersion_AIR_3_9, kApiVersion_VM_INTERNAL }, // AIR_3_9
	{ kApiVersion_AIR_4_0, kApiVersion_SWF_23 }, // SWF_23
	{ kApiVersion_AIR_4_0, kApiVersion_VM_INTERNAL }, // AIR_4_0
	{ kApiVersion_AIR_13_0, kApiVersion_SWF_24 }, // SWF_24
	{ kApiVersion_AIR_13_0, kApiVersion_VM_INTERNAL }, // AIR_13_0
	{ kApiVersion_AIR_14_0, kApiVersion_SWF_25 }, // SWF_25
	{ kApiVersion_AIR_14_0, kApiVersion_VM_INTERNAL }, // AIR_14_0
	{ kApiVersion_AIR_15_0, kApiVersion_SWF_26 }, // SWF_26
	{ kApiVersion_AIR_15_0, kApiVersion_VM_INTERNAL }, // AIR_15_0
	{ kApiVersion_AIR_16_0, kApiVersion_SWF_27 }, // SWF_27
	{ kApiVersion_AIR_16_0, kApiVersion_VM_INTERNAL }, // AIR_16_0
	{ kApiVersion_AIR_17_0, kApiVersion_SWF_28 }, // SWF_28
	{ kApiVersion_AIR_17_0, kApiVersion_VM_INTERNAL }, // AIR_17_0
	{ kApiVersion_AIR_18_0, kApiVersion_SWF_29 }, // SWF_29
	{ kApiVersion_AIR_18_0, kApiVersion_VM_INTERNAL }, // AIR_18_0
	{ kApiVersion_AIR_19_0, kApiVersion_SWF_30 }, // SWF_30
	{ kApiVersion_AIR_19_0, kApiVersion_VM_INTERNAL }, // AIR_19_0
//ADD_PREVIOUS_2_VERSIONED_LINES
    { kApiVersion_VM_INTERNAL, kApiVersion_VM_INTERNAL } // VM_INTERNAL
};

ApiVersion const kApiVersionFirst[kApiVersionSeries_count] = {
    kApiVersion_AIR_1_0,
    kApiVersion_FP_10_0
};

ApiVersion const kApiVersionLatest[kApiVersionSeries_count] = {
    kApiVersion_AIR_19_0,
    kApiVersion_SWF_30
//REPLACE_PREVIOUS_2_VERSIONED_LINES
};

}
