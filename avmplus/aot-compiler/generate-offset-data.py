#!/usr/bin/env python
# -*- Mode: Python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 4 -*-
# vi: set ts=4 sw=4 expandtab:

# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is [Open Source Virtual Machine.].
#
# The Initial Developer of the Original Code is
# Adobe System Incorporated.
# Portions created by the Initial Developer are Copyright (C) 2004-2006
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Adobe AS3 Team
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

import argparse, io, os, sys, struct

def scanFile(data):
    nameSize = 512
    recordsize = 2*nameSize + 3*4
    startSentinal = "<<<< Field Data Begin >>>>"
    paddedStartSentinal = struct.pack("<%ds"%nameSize, startSentinal)
    endSentinal = "<<<< Field Data End >>>>"

    for pos in range(0, len(data)-recordsize):
        if data[pos:pos+nameSize] == paddedStartSentinal:
            break
    else:
        print >> sys.stderr, "offset data not found"
        return

    print '#######################################'
    print '# File generated by', os.path.basename(sys.argv[0])
    print '#'
    print '#     *** DO NOT EDIT ***'
    print '#'
    print '#######################################'

    for pos in range(pos, len(data)-recordsize, recordsize):
        (name1, name2, fieldType, int1, int2) = struct.unpack("<%ds%dsIII"%(nameSize,nameSize),
                                                 data[pos:pos+recordsize])
        name1 = name1[:name1.index('\x00')]
        name2 = name2[:name2.index('\x00')]
        if name1 == endSentinal:
            break
        if fieldType == ord('S'):
            print
            print 'struct', int1, name1, name2   # name2 is non-null for as native classes
        elif fieldType == ord('F'):
            if int2 > 0:
                print 'field', int1, name2, name1, int2  # slot
            else:
                print 'field', int1, name2, name1        # field
        elif fieldType == ord('N'):
            print
            print 'native', int1, name2, '#', name1

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                 
                                 description='''
Extract field information from specially-prepared object file.
''',
                                 epilog='''
The data is organized as follows:

    struct AOTLayoutData {
        char name1[256];
        char name2[256];
        unsigned fieldType;
        unsigned int1;
        unsigned int2;
    };
    #define DEFINESTRUCT(structname) \
        { #structname, "", 'S', sizeof(structname), 0 }
    #define DEFINEFIELD2(structname, fieldname, fieldalias, type) \
        { fieldalias, type, 'F', offsetof(structname, fieldname), 0 }
    #define DEFINEFIELD(structname, fieldname, type) \
        DEFINEFIELD2(structname, fieldname, #fieldname, type)
    #define DEFINELAYOUT(ns, name, asname) \
        { #ns "::" #name, asname, 'S', sizeof(ns::name), 0 }
    #define DEFINESLOT(ns, structname, slotstructname, fieldname, fieldtype, slotNum) \
        { #fieldname, fieldtype, 'F', \
        offsetof(ns::structname, m_slots_##structname) + offsetof(avmplus::NativeID::slotstructname, m_##fieldname), slotNum }
    #define DEFINENATIVE(nativeid, unmangled, mangled, typestr) \
        { #unmangled, mangled " " typestr, 'N', nativeid, 0 }
    #define FIELD_DATA_BEGIN {"<<<< Field Data Begin >>>>", "", 0, 0, 0 }
    #define FIELD_DATA_END   {"<<<< Field Data End >>>>", "", 0, 0, 0 }
''')
parser.add_argument('objfile', type=argparse.FileType('rb'),
                    help='input object file')

args = parser.parse_args()

scanFile(args.objfile.read())
